.data
vetor:  .word 1, 1, 2, 3, 5, 5, 5, 5, 7, 8     # Vetor de exemplo
tamanho: .word 10                            # Tamanho do vetor de exemplo

.text

main:
    la $a0, vetor           # Endereço base do vetor
    lw $a1, tamanho         # Quantidade de elementos

    jal elemDistintos       # Chamada da função elemDistintos

    move $a0, $v0           # Argumento para impressão (quantidade de elementos distintos)
    li $v0, 1               # Código da syscall para impressão de inteiro
    syscall                 # Imprime o valor de $v0

    li $v0, 10              # Código da syscall para encerrar o programa
    syscall

elemDistintos:
    addi $sp, $sp, -12      # Faz espaço para salvar os registradores
    sw $ra, 8($sp)          # Salva o valor de retorno ($ra) na pilha
    sw $s0, 4($sp)          # Salva $s0 na pilha

    move $s0, $a0           # $s0 <- endereço base do vetor
    move $t0, $a1           # $t0 <- quantidade de elementos

    addi $t0, $t0, -1       # Decrementa 1 da quantidade de elementos (índice máximo)
    beqz $t0, return_zero   # Se a quantidade de elementos for zero, retorna 0

    addi $t1, $s0, 4        # $t1 <- endereço do segundo elemento do vetor

    li $t2, 1               # $t2 <- contador de elementos distintos

elemDistintos_loop:
    lw $t3, 0($s0)          # $t3 <- elemento atual
    lw $t4, 0($t1)          # $t4 <- próximo elemento

    beq $t3, $t4, elemDistintos_next    # Se o elemento atual for igual ao próximo, vai para o próximo

    addi $t2, $t2, 1        # Incrementa o contador de elementos distintos

elemDistintos_next:
    addi $s0, $s0, 4        # Incrementa o endereço do vetor em 4 bytes
    addi $t1, $t1, 4        # Incrementa o endereço do próximo elemento em 4 bytes
    addi $t0, $t0, -1       # Decrementa 1 da quantidade de elementos restantes
    bnez $t0, elemDistintos_loop   # Se ainda houver elementos, repete o loop

    move $v0, $t2           # $v0 <- contador de elementos distintos

    lw $ra, 8($sp)          # Restaura o valor de retorno ($ra)
    lw $s0, 4($sp)          # Restaura $s0
    addi $sp, $sp, 12       # Libera o espaço na pilha

    jr $ra                  # Retorna

return_zero:
    li $v0, 0               # Se a quantidade de elementos for zero, retorna 0
    lw $ra, 8($sp)          # Restaura o valor de retorno ($ra)
    lw $s0, 4($sp)          # Restaura $s0
    addi $sp, $sp, 12       # Libera o espaço na pilha

    jr $ra                  # Retorna
